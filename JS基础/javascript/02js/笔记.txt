一.string:x.toString()-->将x转为字符串类型
二.number：Number（x）-->将任意类型转为number类型
三.string-->number
     转为整数：var num=parseInt("str")字符串
                  读取字符串中的整数部分
1.从第一个字符向后读
2.如果碰到第一个数字的字符（包括小数点），停止读取
3.如果碰到空格，忽视
4.如果碰到的第一个非空格字符，不是数字
说明不能转-->NaN：Not a Number
什么是NaN:不是数字（内容）的数字 
      转为浮点数：var num=parseFloat("str")
                  读取字符串中浮点数部分
用法和parseInt完全相同
唯一的差别：parseFloat认识小数点，仅认识一个


prompt（"提示信息"）：专门用于请求用户输入数据，收集数据的对话框！
*凡是从页面上获得的数据，都是字符串！必须先来转换在计算*
而且声明变量var接住收集对话框的数据

如果除数为0：Infinity-->无穷大
typeof(x):判断任意数据的类型
被除数%除数--模运算：被除数/除数，取除不尽的余数
何时用：限制一个数不能超过某个最大范围时


递增/递减运算：
++：i++==>i=i+1;只要遇到变量+1,就用i++
i++单独用：放前放后，效果一样：i++==>++i;
i++出现在表达式内部：前++，先+1，在参与表达式
                     后++，先用旧值参与表达式。表达式之后再+1

关系运算：判断大小！条件判断中使用
结果：成立：true，不成立：false
*自带隐式类型转换*
字符串参与关系运算：
从第一个字符开始，取出每个字符PK Unicode编号
"hello" h e(65)
"hI"    h I(49)
关系运算中：任何类型和数字比较，都转为数字，在比较
            布尔类型参与运算，始终转为数字比较
