关系运算：先将参与判断的数据，强转为相同类型，在比较

字符串比较：
undefined类型,从null类型继承来的
undefined值被自动转为null!
undefined==null ==>true
===严格相等：不带自动类型转换的相等比较！
            类型和值都必须相等！才返回true。
只要不确定比较的类型，又不希望自动类型转换时，就用===



NaN做==:NaN和任何数字做比较，永远返回false
        NaN==NaN==>false
isNaN(x):专门用来判断一个数据是否为NaN
         如果是NaN返回true，如果不是NaN返回false
          是数字返回false，如果不是数字返回true
         只要不能自动转换为数字的，都返回true
         只要能自动转换为数字的，都返回false

总结：1.普通数据，先转为相同类型，在比较
      2.undefined，就用===
      3.NaN,就用isNaN(x)

逻辑运算：基于多组关系运算，得出1个结论
&&：与
||：或
！：非


短路逻辑：
只要前一个判断足矣得出最终结论，后续条件不执行！


位移：左移：n<<m==>n*2的m次方
      右移：n>>m==>n/2的m次方


赋值运算：赋值运算结果就是等于右边表达式的结果
        var x=y=z=10
                y=10
                x=10
扩展的赋值表达式:对已有数据计算的同时，在将结果存回变量
+=：i+=5就等效于i=i+5;


三目运算：根据不同条件，动态返回不同结果！
三目：至少需要3个表达式。
语法：条件？当条件满足时返回的值：当条件不满足时返回的值
一个条件，二选一：
条件？当条件满足时返回的值：当条件不满足时返回的值
多个条件，多选一：
条件1？当条件满足1时返回的值：
条件2？当条件满足2时返回的值：
条件3？当条件满足3时返回的值：
条件n？当条件满足n时返回的值：
                      默认值；