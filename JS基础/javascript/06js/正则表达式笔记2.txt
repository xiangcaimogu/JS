正课:
1.*****正则表达式
2.***String
 查找关键词
 替换
 分隔

1. *****正则表达式:
  1.关键词的原文就是最简单的正则表达式
  2.字符集
  3.预定义字符集
    \d  \w   \s   .
  4.量词:
    {min,max} {min,} {n}
    ?   *   +
  5.选择和分组:
    |    ()
  6.匹配指定位置:
    ^字符串开始位置:
      ^xxx读作"以xxx开头"或开头的xxx
      强调: ^放在正则的开头，表示字符串的开始位置。
            ^放在字符集[]内部的开头，表示除了xxx。
    $字符串结束位置
      xxx$读作"以xxx结尾"或结尾的xxx
    强调: 如果同时前加^，后加$，表示必须从头到尾完整匹配。――验证
     如果不加^和$，只要部分匹配就验证通过
    
    单词边界: \b 开头，结尾，空字符，标点
      \b单词\b

    密码强度:预判 排除法
    至少包含一位大写字母以及一位数字
    1. 预判: 不都是小写字母和数字组成
      说明至少包含一位大写字母或其他字符
      (?![a-z0-9]+$)
    2. 预判: 不都是字母组成
      说明至少包含一位数字或其他字符
      (?![A-Za-z]+$)
    3. 正则: 只能又字母和数字组成
       排除了之前，其他字符的可能
       [A-Za-z0-9]{8,10}
^(?![a-z0-9]+$)(?![A-Za-z]+$)[A-Za-z0-9]{8,10}$

2.***String
***查找关键词:4种
1.查找一个固定关键词的位置:
  var i=str.indexOf("关键词",fromi);
  var i=str.lastIndexOf("关键词",fromi);
  问题: 不支持正则
2.判断是否包含和正则表达式匹配的关键词
  var index=str.search(/正则/i);
    在str中查找第一个和正则匹配的关键词的位置。
    说明: 第二个/后+i，表示忽略大小写
        不加，默认区分大小写
    强调: search永远只能返回第一个关键词的位置。
      不能返回关键词的内容，也无法获得之后更多的关键词。
      所以，只能判断有没有。  
    返回值: 如果找到，返回关键词的位置
            如果没找到，返回-1
   问题: 永远只能找第一个且无法获得关键词的准确内容。
3.获取所有关键词的内容: 
  var kwords=str.match(/正则/ig);
   获取str中所有和正则匹配的关键词，将所有关键词内容，保存在结果数组kwords中
   说明:g 表示全部。
       如果不加g，默认只查找第一个
   如果没找到，返回null！
   今后，都要先判断是不是null，再进一步操作。
   如果不加g: 将完整关键词放在数组的第0个元素。同时为数组添加index属性，标记关键词的位置。
       如果正则中包含分组，还会将每个分组匹配的子内容，分别放在数组的后续元素中。
   问题: 只能获得内容，无法获得每个关键词的位置。
4. 即可获得每个关键词的内容，又可获得每个关键词的位置: reg.exec()

***替换:
   str=str.replace(/正则/ig,"替换值")
    将str中所有和正则匹配的关键词都替换为"替换值"，将生成的新字符串，再存回str中
   高级替换：
   str=str.replace(/正则/ig,
	function(kword){
   	   return "替换值";
        }
   );
   依次找到str中每个和正则匹配的关键词，传给函数的kword参数。函数内根据本次找到的关键词，计算出不同的替换值。replace会将函数返回的替换值，替换到字符串。
   如果需要部分替换关键词:
    1.将正则表达式分组:
    2.从函数的第二个参数开始，依次获得每次匹配的关键词的分组内容。
    str=str.replace(/正则/ig,
	function(kword,$1,$2,...){
   	   return "替换值";
        }
    );

 衍生: 删除: 其实就是将关键词替换成""
       格式化: 2步:
         1.用正则将要格式化的字符串分组
         2.在replace的第二个参数中，用$n代替第n个分组的子内容，拼接格式。

分隔: 将str按照指定的分隔符，分割为多个子字符串。
  var subs=str.split("分隔符");
           str.split(/正则/);
  固定套路:
    1.将字符串打散为字符数组: 
      var chars=str.split("");
    2.按指定字符分隔:
      var subs=str.split("分隔符");
    3.将页面元素的内容，转化为数组









